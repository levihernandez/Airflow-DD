# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.1}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW_SCHEDULER_STATSD_ON: 'True'
    AIRFLOW_SCHEDULER_STATSD_HOST: 'docker-desktop'
    AIRFLOW_SCHEDULER_STATSD_PORT: 8125
    AIRFLOW_SCHEDULER_STATSD_PREFIX: 'airflow'
    DATADOG_HOST: 'datadog'
    
  volumes:
    - /var/run/datadog:/var/run/datadog
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./configs/airflow.cfg:/opt/airflow/airflow.cfg
    - ./tasks:/opt/airflow/tasks
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  labels:
      com.datadoghq.ad.logs: '[{"source":"airflow"}]'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      DATADOG_HOST: 'datadog'
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
      - ./dbconf/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    environment:
      DATADOG_HOST: 'datadog'
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    
  datadog:
    links:
     - redis # Connect the Datadog Agent container to the Redis container
     - airflow-webserver
     - postgres
    #image: gcr.io/datadoghq/agent:latest
    build: datadog/
    environment:
     - DD_API_KEY=<DD-API-KEY>
     - DD_SITE=datadoghq.com
     - DD_LOGS_ENABLED=true
     - DD_ENV=dev_airflow
     - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
     - DD_PROCESS_AGENT_ENABLED=true
     - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
     - DD_DOGSTATSD_PORT=8125
     - DD_DOGSTATSD_ORIGIN_DETECTION=true
     - DD_SYSTEM_PROBE_ENABLED=true
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - /proc/:/host/proc/:ro
     - /var/run/datadog:/var/run/datadog
     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
     - ./logs:/opt/airflow/logs
     - ./datadog/conf.d/airflow.yaml:/etc/datadog-agent/conf.d/airflow.d/conf.yaml
     - ./datadog/conf.d/postgres.yaml:/etc/datadog-agent/conf.d/postgres.d/conf.yaml
     - ./datadog/datadog.yaml:/etc/datadog-agent/datadog.yaml
    ports:
      - "8125:8125/udp"
    #labels:
    #  com.datadoghq.ad.check_names: '["postgres"]'
    #  com.datadoghq.ad.init_configs: '[{}]'
    #  com.datadoghq.ad.instances: '[{"host":"postgres", "port":5432,"username":"datadog","password":"datadog"}]'
volumes:
  postgres-db-volume:
